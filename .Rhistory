customdata = ~map2(location, description, ~list(.x, .y))) %>%
add_trace(type='scatter',
hovertemplate=paste(cityData$location,'<extra></extra>'),
mode='markers',
# Style city coordinates
marker = list(color='LightSkyBlue',
symbol=c('square'),
size=15,
opacity=0)) %>%
config(displayModeBar = F) %>%
layout(
# TODO: PKM Location on Routes as lines
shapes = lapply(eval(parse(text=as.character(loc))),
function(location) {encounter(location)}),
# Style hover labels
hoverlabel = list(bgcolor='lightgrey',
font=list(family="Power Green")),
xaxis = list(  title = "",
zeroline = FALSE,
showline = FALSE,
showticklabels = FALSE,
showgrid = FALSE,
fixedrange = TRUE,
range=c(-260,260)),
yaxis = list(  title = "",
zeroline = FALSE,
showline = FALSE,
showticklabels = FALSE,
showgrid = FALSE,
fixedrange = TRUE,
scaleanchor="x",
scaleratio=1,
range=c(-260,260)),
images = list(
list(source =  "https://i.imgur.com/Vyt5lQw.png",
xref = "x",
yref = "y",
x = -130,
y = 220,
sizex = 260,
sizey = 440,
sizing = "stretch",
opacity = 1,
layer = "below"
)))
p
library(plotly)
library(magrittr)
library(purrr)
cityData <- read.csv('data.csv')
loc <- 'list(c(45,-93,45,-147))'
encounter <- function(x){
return(
list(type = "line",
opacity = 0.5,
line = list(width=15, color = "blue"),
x0 = x[1], x1 = x[3],
y0 = x[2], y1 = x[4]))
}
p <- plot_ly(data = cityData,
x = ~x,
y = ~y,
source = "Source",
customdata = ~map2(location, description, ~list(.x, .y))) %>%
add_trace(type='scatter',
hovertemplate=paste(cityData$location,'<extra></extra>'),
mode='markers',
# Style city coordinates
marker = list(color='LightSkyBlue',
symbol=c('square'),
size=15,
opacity=0)) %>%
config(displayModeBar = F) %>%
layout(
# TODO: PKM Location on Routes as lines
shapes = lapply(eval(parse(text=as.character(loc))),
function(location) {encounter(location)}),
# Style hover labels
hoverlabel = list(bgcolor='lightgrey',
font=list(family="Power Green")),
xaxis = list(  title = "",
zeroline = FALSE,
showline = FALSE,
showticklabels = FALSE,
showgrid = FALSE,
fixedrange = TRUE,
range=c(-260,260)),
yaxis = list(  title = "",
zeroline = FALSE,
showline = FALSE,
showticklabels = FALSE,
showgrid = FALSE,
fixedrange = TRUE,
scaleanchor="x",
scaleratio=1,
range=c(-260,260)),
images = list(
list(source =  "https://i.imgur.com/Vyt5lQw.png",
xref = "x",
yref = "y",
x = -130,
y = 220,
sizex = 260,
sizey = 440,
sizing = "stretch",
opacity = 1,
layer = "below"
)))
p
library(plotly)
library(magrittr)
library(purrr)
cityData <- read.csv('data.csv')
loc <- 'list(c(40,-145,5,-145))'
encounter <- function(x){
return(
list(type = "line",
opacity = 0.5,
line = list(width=15, color = "blue"),
x0 = x[1], x1 = x[3],
y0 = x[2], y1 = x[4]))
}
p <- plot_ly(data = cityData,
x = ~x,
y = ~y,
source = "Source",
customdata = ~map2(location, description, ~list(.x, .y))) %>%
add_trace(type='scatter',
hovertemplate=paste(cityData$location,'<extra></extra>'),
mode='markers',
# Style city coordinates
marker = list(color='LightSkyBlue',
symbol=c('square'),
size=15,
opacity=0)) %>%
config(displayModeBar = F) %>%
layout(
# TODO: PKM Location on Routes as lines
shapes = lapply(eval(parse(text=as.character(loc))),
function(location) {encounter(location)}),
# Style hover labels
hoverlabel = list(bgcolor='lightgrey',
font=list(family="Power Green")),
xaxis = list(  title = "",
zeroline = FALSE,
showline = FALSE,
showticklabels = FALSE,
showgrid = FALSE,
fixedrange = TRUE,
range=c(-260,260)),
yaxis = list(  title = "",
zeroline = FALSE,
showline = FALSE,
showticklabels = FALSE,
showgrid = FALSE,
fixedrange = TRUE,
scaleanchor="x",
scaleratio=1,
range=c(-260,260)),
images = list(
list(source =  "https://i.imgur.com/Vyt5lQw.png",
xref = "x",
yref = "y",
x = -130,
y = 220,
sizex = 260,
sizey = 440,
sizing = "stretch",
opacity = 1,
layer = "below"
)))
p
library(plotly)
library(magrittr)
library(purrr)
cityData <- read.csv('data.csv')
loc <- 'list(c(40,-135,15,-135))'
encounter <- function(x){
return(
list(type = "line",
opacity = 0.5,
line = list(width=15, color = "blue"),
x0 = x[1], x1 = x[3],
y0 = x[2], y1 = x[4]))
}
p <- plot_ly(data = cityData,
x = ~x,
y = ~y,
source = "Source",
customdata = ~map2(location, description, ~list(.x, .y))) %>%
add_trace(type='scatter',
hovertemplate=paste(cityData$location,'<extra></extra>'),
mode='markers',
# Style city coordinates
marker = list(color='LightSkyBlue',
symbol=c('square'),
size=15,
opacity=0)) %>%
config(displayModeBar = F) %>%
layout(
# TODO: PKM Location on Routes as lines
shapes = lapply(eval(parse(text=as.character(loc))),
function(location) {encounter(location)}),
# Style hover labels
hoverlabel = list(bgcolor='lightgrey',
font=list(family="Power Green")),
xaxis = list(  title = "",
zeroline = FALSE,
showline = FALSE,
showticklabels = FALSE,
showgrid = FALSE,
fixedrange = TRUE,
range=c(-260,260)),
yaxis = list(  title = "",
zeroline = FALSE,
showline = FALSE,
showticklabels = FALSE,
showgrid = FALSE,
fixedrange = TRUE,
scaleanchor="x",
scaleratio=1,
range=c(-260,260)),
images = list(
list(source =  "https://i.imgur.com/Vyt5lQw.png",
xref = "x",
yref = "y",
x = -130,
y = 220,
sizex = 260,
sizey = 440,
sizing = "stretch",
opacity = 1,
layer = "below"
)))
p
library(plotly)
library(magrittr)
library(purrr)
cityData <- read.csv('data.csv')
loc <- 'list(c(40,-130,15,-130))'
encounter <- function(x){
return(
list(type = "line",
opacity = 0.5,
line = list(width=15, color = "blue"),
x0 = x[1], x1 = x[3],
y0 = x[2], y1 = x[4]))
}
p <- plot_ly(data = cityData,
x = ~x,
y = ~y,
source = "Source",
customdata = ~map2(location, description, ~list(.x, .y))) %>%
add_trace(type='scatter',
hovertemplate=paste(cityData$location,'<extra></extra>'),
mode='markers',
# Style city coordinates
marker = list(color='LightSkyBlue',
symbol=c('square'),
size=15,
opacity=0)) %>%
config(displayModeBar = F) %>%
layout(
# TODO: PKM Location on Routes as lines
shapes = lapply(eval(parse(text=as.character(loc))),
function(location) {encounter(location)}),
# Style hover labels
hoverlabel = list(bgcolor='lightgrey',
font=list(family="Power Green")),
xaxis = list(  title = "",
zeroline = FALSE,
showline = FALSE,
showticklabels = FALSE,
showgrid = FALSE,
fixedrange = TRUE,
range=c(-260,260)),
yaxis = list(  title = "",
zeroline = FALSE,
showline = FALSE,
showticklabels = FALSE,
showgrid = FALSE,
fixedrange = TRUE,
scaleanchor="x",
scaleratio=1,
range=c(-260,260)),
images = list(
list(source =  "https://i.imgur.com/Vyt5lQw.png",
xref = "x",
yref = "y",
x = -130,
y = 220,
sizex = 260,
sizey = 440,
sizing = "stretch",
opacity = 1,
layer = "below"
)))
p
library(plotly)
library(magrittr)
library(purrr)
cityData <- read.csv('data.csv')
loc <- 'list(c(40,-130,13,-130))'
encounter <- function(x){
return(
list(type = "line",
opacity = 0.5,
line = list(width=15, color = "blue"),
x0 = x[1], x1 = x[3],
y0 = x[2], y1 = x[4]))
}
p <- plot_ly(data = cityData,
x = ~x,
y = ~y,
source = "Source",
customdata = ~map2(location, description, ~list(.x, .y))) %>%
add_trace(type='scatter',
hovertemplate=paste(cityData$location,'<extra></extra>'),
mode='markers',
# Style city coordinates
marker = list(color='LightSkyBlue',
symbol=c('square'),
size=15,
opacity=0)) %>%
config(displayModeBar = F) %>%
layout(
# TODO: PKM Location on Routes as lines
shapes = lapply(eval(parse(text=as.character(loc))),
function(location) {encounter(location)}),
# Style hover labels
hoverlabel = list(bgcolor='lightgrey',
font=list(family="Power Green")),
xaxis = list(  title = "",
zeroline = FALSE,
showline = FALSE,
showticklabels = FALSE,
showgrid = FALSE,
fixedrange = TRUE,
range=c(-260,260)),
yaxis = list(  title = "",
zeroline = FALSE,
showline = FALSE,
showticklabels = FALSE,
showgrid = FALSE,
fixedrange = TRUE,
scaleanchor="x",
scaleratio=1,
range=c(-260,260)),
images = list(
list(source =  "https://i.imgur.com/Vyt5lQw.png",
xref = "x",
yref = "y",
x = -130,
y = 220,
sizex = 260,
sizey = 440,
sizing = "stretch",
opacity = 1,
layer = "below"
)))
p
shiny::runApp('pokemon_map')
library(magrittr)
library(plotly)
library(purrr)
library(shiny)
library(shinyjs)
encounter <- function(x){
return(
list(type = "line",
opacity = 0.5,
line = list(width=15, color='black'),
x0 = x[1], x1 = x[3],
y0 = x[2], y1 = x[4]))
}
pkmData <- read.csv('www/pokemon_data.csv')
cityData <- read.csv('www/data.csv')
shinyServer(function(input, output) {
# Locations
loc <- reactiveVal()
output$mapPlot <- renderPlotly({
p <- plot_ly(data = cityData,
x = ~x,
y = ~y,
source = "Source",
customdata = ~map2(location, description, ~list(.x, .y))) %>%
add_trace(type='scatter',
hovertemplate=paste(cityData$location,'<extra></extra>'),
mode='markers',
# Style city coordinates
marker = list(symbol=c('square'),
size=15,
opacity=0)) %>%
config(displayModeBar = F) %>%
layout(
# TODO: PKM Location on Routes as lines
shapes = loc(),
# Style hover labels
hoverlabel = list(bgcolor='lightgrey',
font=list(family="Power Green")),
xaxis = list(  title = "",
zeroline = FALSE,
showline = FALSE,
showticklabels = FALSE,
showgrid = FALSE,
fixedrange = TRUE,
range=c(-260,260)),
yaxis = list(  title = "",
zeroline = FALSE,
showline = FALSE,
showticklabels = FALSE,
showgrid = FALSE,
fixedrange = TRUE,
scaleanchor="x",
scaleratio=1,
range=c(-260,260)),
images = list(
list(source =  "map.png",
xref = "x",
yref = "y",
x = -130,
y = 220,
sizex = 260,
sizey = 440,
sizing = "stretch",
opacity = 1,
layer = "below"
)))
})
hoverData <- reactive({
currentEventData <- unlist(event_data(event = "plotly_hover", source = "Source", priority = "event"))
})
clickData <- reactiveVal()
observe({
clickData(unlist(event_data(event = "plotly_click", source = "Source", priority = "event")))
})
observeEvent(input$sprite, {
data_point <- pkmData[input$sprite,3:7]
name <- pkmData[input$sprite,2]
type1 <- pkmData[input$sprite,8]
type2 <- pkmData[input$sprite,9]
#Update location on map
loc_lst <- lapply(eval(parse(text=as.character(pkmData[input$sprite,10]))),
function(location) {encounter(location)})
loc(loc_lst)
output$pkmName <- renderText({
paste0('<h1>',name,'</h1>')
})
output$pkmType <- renderText({
if (type2!='') {
paste0('<p>TYPE<b>1</b>/',type1,'</p>','<p>TYPE<b>2</b>/',type2,'</p>')
}
else {
paste0('<p>TYPE<b>1</b>/',type1,'</p>')
}
})
output$pkmStat <- renderPlotly({
fig <- plot_ly(
height = 250,
y = names(data_point),
x = unlist(data_point),
type = "bar",
orientation = 'h',
text = unlist(data_point),
textposition = 'auto',
marker = list(color='lightgrey')
) %>%
config(displayModeBar = F) %>%
layout(
hovermode = FALSE,
font = list(family = "Power Green"),
yaxis = list(categoryorder = "array",
categoryarray = rev(names(data_point)),
title = "",
zeroline = FALSE,
showline = FALSE,
showgrid = FALSE,
fixedrange = TRUE),
xaxis = list(  title = "",
zeroline = FALSE,
showline = FALSE,
showticklabels = FALSE,
showgrid = FALSE,
fixedrange = TRUE,
range=c(0,160))
)
})
})
onclick(id = "mapClick", expr = {clickData(hoverData())})
#TODO: Currently hidding hovering data
output$clickDataOut <- renderText({
paste("Hover data:", paste(names(hoverData()), unlist(hoverData()), sep = ": ", collapse = " | "))
})
#TODO: Currently only displaying names of clicked data
output$hoverDataOut <- renderText({
paste0('<h1>',hoverData()[5],'</h1>',hoverData()[6])
})
# Grid of pokemon
output$imageGrid <- renderUI({
fluidRow(
lapply(c(1:151), function(img) {
column(1,
tags$img(src=paste0("sprite/", img,'.png'), class='sprite', 'data-value'=img, tabindex=0)
)
})
)
})
output$test <- renderText({
input$sprite
})
})
runApp('pokemon_map')
